{"version":3,"sources":["stores/common.ts","orbitController.tsx","resources/daysky.jpg","resources/nightsky.jpg","views/sky.tsx","views/axes.tsx","views/compass.tsx","views/foundation.tsx","scene.tsx","views/ground.tsx","views/util.ts","views/heliodon.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["enableMapSet","useStore","create","devtools","persist","set","get","api","immerSet","fn","produce","worlds","getWorld","name","createNewWorld","state","elements","push","type","cx","cy","lx","ly","height","id","world","cameraPosition","Vector3","extend","OrbitControls","OrbitController","useThree","camera","domElement","gl","controls","useRef","useEffect","current","target","addEventListener","onInteractionEnd","removeEventListener","w","x","position","y","z","ref","args","enableZoom","maxAzimuthAngle","Math","PI","minAzimuthAngle","Sky","props","meshRef","texture","useMemo","loader","TextureLoader","load","NightSkyImage","DaySkyImage","scale","onClick","e","intersections","length","object","console","log","map","side","DoubleSide","opacity","color","Axes","endPoint","mesh","pointsXAxis","geometryXAxis","BufferGeometry","setFromPoints","materialXAxis","LineBasicMaterial","linewidth","pointsYAxis","geometryYAxis","materialYAxis","pointsZAxis","geometryZAxis","materialZAxis","Compass","model","useLoader","OBJLoader","font","FontLoader","useFrame","v","unproject","textGeometryParams","size","textMaterial","MeshBasicMaterial","compassMaterial","rotation","Euler","material","Foundation","lineColor","hovered","selected","baseRef","handleLLRef","handleULRef","handleLRRef","handleURRef","positionLL","positionUL","positionLR","positionUR","yOffset","hoverMe","on","castShadow","receiveShadow","onPointerOver","onPointerOut","attach","Line","points","Scene","filter","Ground","planeRef","Util","degrees","radians","sphereCoords","a","cos","sin","TILT_ANGLE","computeSunLocation","hourAngle","declinationAngle","observerLatitude","altitudeAngle","asin","xAzm","yAzm","azimuthAngle","atan2","coords","sphericalToCartesianZ","setX","Heliodon","date","Date","latitude","useState","sunPosition","setSunPosition","basePoints","tickPoints","step","counter","angle","TWO_PI","trimedAngle","min","width","p","ZERO_TOLERANCE","basePositions","Float32Array","baseNormals","baseColors","i","j","c","floor","sunPathPoints","sunbeltGeometry","declinationStep","hourStep","geometry","verticesCount","vertices","indices","hourAngle2","declinationAngle2","v1","v2","v3","v4","setIndex","BufferAttribute","Uint16Array","attachObject","count","array","itemSize","vertexColors","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","Color","clippingPlanes","Plane","UNIT_VECTOR_POS_Y","transparent","SphereGeometry","App","className","style","backgroundColor","paddingTop","fontSize","alt","src","verticalAlign","paddingLeft","shadows","fov","fallback","intensity","shadow-mapSize-height","shadow-mapSize-width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.840dd9cb.chunk.js","sourcesContent":["/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport create from 'zustand';\r\nimport {devtools, persist} from 'zustand/middleware';\r\nimport produce, {enableMapSet} from 'immer';\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {Vector3} from \"three\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\n\r\nenableMapSet();\r\n\r\nexport interface CommonStoreState {\r\n    set: (fn: (state: CommonStoreState) => void) => void;\r\n    worlds: { [key: string]: WorldModel };\r\n    createNewWorld: () => void;\r\n    getWorld: (name: string) => WorldModel;\r\n}\r\n\r\nexport const useStore = create<CommonStoreState>(devtools(persist((\r\n    set,\r\n    get,\r\n    api,\r\n) => {\r\n    const immerSet: CommonStoreState['set'] = fn => set(produce(fn));\r\n    return {\r\n\r\n        set: immerSet,\r\n\r\n        worlds: {},\r\n\r\n        getWorld(name: string) {\r\n            return get().worlds[name];\r\n        },\r\n\r\n        createNewWorld() {\r\n            immerSet((state: CommonStoreState) => {\r\n                const elements: ElementModel[] = [];\r\n                const e1 = {type: 'Foundation', cx: 0, cy: 0, lx: 2, ly: 4, height: 0.1, id: 'f1'};\r\n                const e2 = {type: 'Foundation', cx: 1, cy: 2, lx: 2, ly: 2, height: 0.2, id: 'f2'};\r\n                elements.push(e1);\r\n                elements.push(e2);\r\n                const world = {\r\n                    name: 'default',\r\n                    elements: elements,\r\n                    cameraPosition: new Vector3(0, 0, 5)\r\n                };\r\n                state.worlds[world.name] = world;\r\n            })\r\n        }\r\n    };\r\n}, {name: 'aladdin-storage'})));\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {extend, Object3DNode, useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"./stores/common\";\r\n\r\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\r\nextend({OrbitControls});\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'orbitControls': Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface OrbitControllerProps {\r\n    [key: string]: any;\r\n}\r\n\r\n// Get a reference to the Three.js Camera, and the canvas html element.\r\n// We need these to setup the OrbitControls class.\r\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\r\nconst OrbitController = () => {\r\n\r\n    const set = useStore(state => state.set);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef<OrbitControls>(null);\r\n\r\n    useEffect(() => {\r\n        if (controls.current) {\r\n            controls.current.target.set(0, 0, 0);\r\n            controls.current.addEventListener('end', onInteractionEnd);\r\n        }\r\n        return () => {\r\n            controls.current?.removeEventListener('end', onInteractionEnd);\r\n        }\r\n    }, []);\r\n\r\n    const onInteractionEnd = () => {\r\n        set((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                // FIXME: why can't set function be used?\r\n                w.cameraPosition.x = camera.position.x;\r\n                w.cameraPosition.y = camera.position.y;\r\n                w.cameraPosition.z = camera.position.z;\r\n            }\r\n        });\r\n    };\r\n\r\n    // animation\r\n    // useFrame((state) => {\r\n    //     if (controls.current) {\r\n    //         controls.current.update();\r\n    //     }\r\n    // });\r\n\r\n    return (\r\n        <orbitControls\r\n            ref={controls}\r\n            args={[camera, domElement]}\r\n            enableZoom={true}\r\n            maxAzimuthAngle={Math.PI}\r\n            minAzimuthAngle={-Math.PI}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default OrbitController;\r\n","export default __webpack_public_path__ + \"static/media/daysky.66925efd.jpg\";","export default __webpack_public_path__ + \"static/media/nightsky.2ee37da6.jpg\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef} from \"react\";\r\nimport DaySkyImage from \"../resources/daysky.jpg\";\r\nimport NightSkyImage from \"../resources/nightsky.jpg\";\r\nimport {DoubleSide, Mesh, TextureLoader} from \"three\";\r\n\r\nexport interface SkyProps {\r\n    type?: string,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Sky = ({\r\n                 type = 'day sky',\r\n                 ...props\r\n             }: SkyProps) => {\r\n\r\n    const meshRef = useRef<Mesh>(null!);\r\n    const texture = useMemo(() => {\r\n        const loader = new TextureLoader();\r\n        let texture;\r\n        switch (type) {\r\n            case 'night sky':\r\n                texture = loader.load(NightSkyImage);\r\n                break;\r\n            default:\r\n                texture = loader.load(DaySkyImage);\r\n        }\r\n        return texture;\r\n    }, [type]);\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={meshRef}\r\n            name={'Sky'}\r\n            scale={1}\r\n            onClick={(e) => {\r\n                if (e.intersections.length > 0) {\r\n                    const skyClicked = e.intersections[0].object === meshRef.current;\r\n                    if (skyClicked) {\r\n                        console.log('Sky clicked');\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            <sphereGeometry args={[1000, 16, 16, 0, 2 * Math.PI, 0, Math.PI / 2 + 0.01]}/>\r\n            <meshBasicMaterial map={texture}\r\n                               side={DoubleSide}\r\n                               opacity={1}\r\n                               color={'skyblue'}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Sky;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {BufferGeometry, LineBasicMaterial, Mesh, Vector3} from \"three\";\r\n\r\nexport interface AxesProps {\r\n    endPoint?: number,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Axes = ({\r\n                  endPoint = 1000,\r\n                  ...props\r\n              }: AxesProps) => {\r\n    const mesh = useRef<Mesh>(null!);\r\n\r\n    const pointsXAxis = [];\r\n    pointsXAxis.push(new Vector3(-endPoint, 0, 0));\r\n    pointsXAxis.push(new Vector3(endPoint, 0, 0));\r\n    const geometryXAxis = new BufferGeometry().setFromPoints(pointsXAxis);\r\n    const materialXAxis = new LineBasicMaterial({color: 'red', linewidth: 10});\r\n\r\n    const pointsYAxis = [];\r\n    pointsYAxis.push(new Vector3(0, -endPoint, 0));\r\n    pointsYAxis.push(new Vector3(0, endPoint, 0));\r\n    const geometryYAxis = new BufferGeometry().setFromPoints(pointsYAxis);\r\n    const materialYAxis = new LineBasicMaterial({color: 'green', linewidth: 10});\r\n\r\n    const pointsZAxis = [];\r\n    pointsZAxis.push(new Vector3(0, 0, -endPoint));\r\n    pointsZAxis.push(new Vector3(0, 0, endPoint));\r\n    const geometryZAxis = new BufferGeometry().setFromPoints(pointsZAxis);\r\n    const materialZAxis = new LineBasicMaterial({color: 'blue', linewidth: 10});\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n        >\r\n            <lineSegments args={[geometryXAxis, materialXAxis]}/>\r\n            <lineSegments args={[geometryYAxis, materialYAxis]}/>\r\n            <lineSegments args={[geometryZAxis, materialZAxis]}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Axes;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {useFrame, useLoader, useThree} from '@react-three/fiber'\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Euler, FontLoader, Mesh, MeshBasicMaterial, TextGeometryParameters, Vector3} from \"three\";\r\n\r\nexport interface CompassProps {\r\n    scale?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Compass = ({\r\n                     scale = 0.01,\r\n                     ...props\r\n                 }: CompassProps) => {\r\n    const model = useLoader(OBJLoader, 'static/assets/compass.obj');\r\n    const font = useLoader(FontLoader, 'static/fonts/helvetiker_regular.typeface.json');\r\n    const mesh = useRef<Mesh>(null!);\r\n    const {camera} = useThree();\r\n    useFrame((state) => {\r\n        if (mesh.current) {\r\n            const v = new Vector3(0.88, -0.8, 0).unproject(camera);\r\n            mesh.current.position.set(v.x, v.y, v.z);\r\n        }\r\n    });\r\n    const textGeometryParams = {font: font, height: 0.00, size: 0.005} as TextGeometryParameters;\r\n    const textMaterial = new MeshBasicMaterial({color: 'white'});\r\n    const compassMaterial = new MeshBasicMaterial({color: 'red'});\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n            rotation={new Euler(-Math.PI / 2, 0, 0)}\r\n        >\r\n            <mesh position={[-0.001, 0.02, 0]} material={textMaterial}>\r\n                <textGeometry args={['N', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.0015, -0.025, 0]} material={textMaterial}>\r\n                <textGeometry args={['S', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.025, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['W', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[0.02, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['E', textGeometryParams]}/>\r\n            </mesh>\r\n            <primitive object={model} scale={scale} material={compassMaterial}/>\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\n\r\nconst Foundation = ({\r\n                        id,\r\n                        cx,\r\n                        cy,\r\n                        lx = 1,\r\n                        ly = 1,\r\n                        height = 0.1,\r\n                        color = 'gray',\r\n                        lineColor = 'black',\r\n                        hovered = false,\r\n                        selected = false,\r\n                    }: FoundationModel) => {\r\n\r\n    const set = useStore(state => state.set);\r\n\r\n    const baseRef = useRef();\r\n    const handleLLRef = useRef();\r\n    const handleULRef = useRef();\r\n    const handleLRRef = useRef();\r\n    const handleURRef = useRef();\r\n\r\n    const positionLL = new Vector3(cx - lx / 2, height / 2, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, height / 2, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, height / 2, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, height / 2, cy + ly / 2);\r\n\r\n    const yOffset = 0.002;\r\n\r\n    const selectMe = () => {\r\n        set((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const hoverMe = (on: boolean) => {\r\n        set((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    if (e.id === id) {\r\n                        e.hovered = on;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group>\r\n\r\n            {/* draw rectangle */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onClick={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             hoverMe(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     hoverMe(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={hovered ? 'lightGray' : color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[[positionLL.x, yOffset, positionLL.z], [positionLR.x, yOffset, positionLR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionLR.x, yOffset, positionLR.z], [positionUR.x, yOffset, positionUR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUR.x, yOffset, positionUR.z], [positionUL.x, yOffset, positionUL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUL.x, yOffset, positionUL.z], [positionLL.x, yOffset, positionLL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[[positionLL.x, yOffset, positionLL.z], [positionLL.x, height, positionLL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionLR.x, yOffset, positionLR.z], [positionLR.x, height, positionLR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUL.x, yOffset, positionUL.z], [positionUL.x, height, positionUL.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n                <Line points={[[positionUR.x, yOffset, positionUR.z], [positionUR.x, height, positionUR.z]]}>\r\n                    <lineBasicMaterial color={lineColor}/>\r\n                </Line>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                <Sphere ref={handleLLRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleULRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLRRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleURRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Foundation;\r\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport Foundation from \"./views/foundation\";\nimport {Box} from \"@react-three/drei\";\nimport {WorldModel} from \"./models/worldModel\";\nimport {FoundationModel} from \"./models/foundationModel\";\n\nconst Scene: React.FC<{ world: WorldModel }> = ({world}) => {\n    return (\n        <group>\n            <Box castShadow receiveShadow\n                 args={[1, 2, 1]}\n                 position={[0, 1, 0]}>\n                <meshStandardMaterial attach=\"material\" color={'white'}/>\n            </Box>\n            {world.elements\n                .filter(e => e.type === 'Foundation')\n                .map(e => <Foundation key={e.id} {...e as FoundationModel}/>)}\n        </group>\n    );\n};\n\nexport default Scene;\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Plane} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\n\r\nexport interface GroundProps {\r\n    color?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Ground = ({\r\n                    color = 'forestgreen',\r\n                    ...props\r\n                }: GroundProps) => {\r\n\r\n    const set = useStore(state => state.set);\r\n    const planeRef = useRef();\r\n\r\n    const selectNone = () => {\r\n        set((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Plane receiveShadow\r\n               ref={planeRef}\r\n               name={'Ground'}\r\n               onClick={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           selectNone();\r\n                       }\r\n                   }\r\n               }}\r\n               rotation={[-Math.PI / 2, 0, 0]}\r\n               position={[0, 0, 1]}\r\n               args={[10000, 10000]}>\r\n            <meshStandardMaterial side={DoubleSide}\r\n                                  attach=\"material\"\r\n                                  color={color}/>\r\n        </Plane>\r\n    )\r\n};\r\n\r\nexport default Ground;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Vector3} from \"three\";\r\n\r\nexport class Util {\r\n\r\n    static get UNIT_VECTOR_POS_X() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_X() {\r\n        return new Vector3(-1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Y() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Y() {\r\n        return new Vector3(0, -1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Z() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Z() {\r\n        return new Vector3(0, 0, -1);\r\n    }\r\n\r\n    static get ZERO_TOLERANCE() {\r\n        return 0.0001;\r\n    }\r\n\r\n    static get HALF_PI() {\r\n        return Math.PI / 2;\r\n    }\r\n\r\n    static get TWO_PI() {\r\n        return Math.PI * 2;\r\n    }\r\n\r\n    static toRadians(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    static toDegrees(radians: number) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    static sphericalToCartesianZ(sphereCoords: THREE.Vector3) {\r\n        let a = sphereCoords.x * Math.cos(sphereCoords.z);\r\n        let x = a * Math.cos(sphereCoords.y);\r\n        let y = a * Math.sin(sphereCoords.y);\r\n        let z = sphereCoords.x * Math.sin(sphereCoords.z);\r\n        sphereCoords.set(x, y, z);\r\n        return sphereCoords;\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"./util\";\r\nimport {useEffect, useMemo, useState} from \"react\";\r\nimport {\r\n    BufferAttribute,\r\n    BufferGeometry,\r\n    Color,\r\n    DoubleSide,\r\n    Euler,\r\n    MeshBasicMaterial,\r\n    Plane,\r\n    SphereGeometry,\r\n    Vector3\r\n} from \"three\";\r\n\r\nexport interface HeliodonProps {\r\n    date: Date;\r\n    latitude: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst TILT_ANGLE = 23.45 / 180.0 * Math.PI;\r\nconst HOUR_DIVISIONS = 96;\r\nconst BASE_DIVISIONS = 72;\r\nconst DECLINATION_DIVISIONS = 12;\r\nconst r = 5;\r\n\r\nconst computeDeclinationAngle = (date: Date) => {\r\n    // let days = Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));\r\n    let days = 0;\r\n    return TILT_ANGLE * Math.sin(Util.TWO_PI * (284 + days) / 365.25);\r\n};\r\n\r\nconst computeHourAngle = (date: Date) => {\r\n    const minutes = date.getHours() * 60 + date.getMinutes() - 12 * 60;\r\n    return minutes / (12.0 * 60.0) * Math.PI;\r\n}\r\n\r\nconst computeSunLocation = (hourAngle: number,\r\n                            declinationAngle: number,\r\n                            observerLatitude: number) => {\r\n    const altitudeAngle = Math.asin(\r\n        Math.sin(declinationAngle) * Math.sin(observerLatitude) +\r\n        Math.cos(declinationAngle) * Math.cos(hourAngle) * Math.cos(observerLatitude)\r\n    );\r\n    const xAzm = Math.sin(hourAngle) * Math.cos(declinationAngle);\r\n    const yAzm = Math.cos(observerLatitude) * Math.sin(declinationAngle)\r\n        - Math.cos(hourAngle) * Math.cos(declinationAngle) * Math.sin(observerLatitude);\r\n    const azimuthAngle = Math.atan2(yAzm, xAzm);\r\n    const coords = new Vector3(r, azimuthAngle, altitudeAngle);\r\n    Util.sphericalToCartesianZ(coords);\r\n    // reverse the x so that sun moves from east to west\r\n    coords.setX(-coords.x);\r\n    // swap y and z coordinates\r\n    const z = coords.z;\r\n    coords.z = coords.y;\r\n    coords.y = z;\r\n    return coords;\r\n};\r\n\r\nconst Heliodon = ({\r\n                      date = new Date(),\r\n                      latitude = 42 / 180.0 * Math.PI,\r\n                      ...props\r\n                  }: HeliodonProps) => {\r\n\r\n    const [declinationAngle, setDeclinationAngle] = useState<number>(0);\r\n    const [hourAngle, setHouseAngle] = useState<number>(0);\r\n    const [sunPosition, setSunPosition] = useState<Vector3>(new Vector3());\r\n\r\n    useEffect(() => {\r\n        setSunPosition(computeSunLocation(hourAngle, declinationAngle, latitude));\r\n        return () => {\r\n            // remove listeners if any\r\n        }\r\n    }, []);\r\n\r\n    const [basePositions, baseNormals, baseColors, tickPoints] = useMemo(() => {\r\n        const basePoints: Vector3[] = [];\r\n        const tickPoints: Vector3[] = [];\r\n        const step = Math.PI * 2 / BASE_DIVISIONS;\r\n        let counter = 0;\r\n        for (let angle = 0; angle < Util.TWO_PI + step / 2.0; angle += step) {\r\n            const trimedAngle = Math.min(angle, Util.TWO_PI);\r\n            let width = 0.3;\r\n            // TODO: This is inefficient. We should use indexed buffer to share vertices\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r, trimedAngle, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r + width, trimedAngle, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r, trimedAngle + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r + width, trimedAngle, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r + width, trimedAngle + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(r, trimedAngle + step, 0)));\r\n            let p;\r\n            if (Util.TWO_PI - trimedAngle > Util.ZERO_TOLERANCE) {\r\n                width = counter % 3 === 0 ? 0.5 : 0.3;\r\n                p = new Vector3(r, trimedAngle, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n                p = new Vector3(r + width, trimedAngle, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n            }\r\n            counter++;\r\n        }\r\n\r\n        // attributes\r\n        const length = basePoints.length * 3;\r\n        const basePositions = new Float32Array(length);\r\n        const baseNormals = new Float32Array(length);\r\n        const baseColors = new Float32Array(length);\r\n\r\n        for (let i = 0; i < basePoints.length; i++) {\r\n            const j = i * 3;\r\n            basePositions[j] = basePoints[i].x;\r\n            basePositions[j + 1] = basePoints[i].y;\r\n            basePositions[j + 2] = basePoints[i].z;\r\n            baseNormals[j] = 0;\r\n            baseNormals[j + 1] = 1;\r\n            baseNormals[j + 2] = 0;\r\n            const c = (Math.floor(i / 18)) % 2 === 0 ? 0.2 : 1.0;\r\n            baseColors[j] = c;\r\n            baseColors[j + 1] = c;\r\n            baseColors[j + 2] = c;\r\n        }\r\n\r\n        return [basePositions, baseNormals, baseColors, tickPoints];\r\n    }, []);\r\n\r\n    const sunPathPoints = useMemo(() => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let hourAngle = -Math.PI; hourAngle < Math.PI + step / 2.0; hourAngle += step) {\r\n            const v = computeSunLocation(hourAngle, declinationAngle, latitude);\r\n            if (v.z > -0.3) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    }, []);\r\n\r\n    const sunbeltGeometry = useMemo(() => {\r\n        const declinationStep = 2.0 * TILT_ANGLE / DECLINATION_DIVISIONS;\r\n        const hourStep = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const geometry = new BufferGeometry();\r\n        let verticesCount = 0;\r\n        const vertices: Vector3[] = [];\r\n        const indices = [];\r\n        for (let declinationAngle = -TILT_ANGLE; declinationAngle < TILT_ANGLE - declinationStep / 2.0; declinationAngle += declinationStep) {\r\n            for (let hourAngle = -Math.PI; hourAngle < Math.PI - hourStep / 2.0; hourAngle += hourStep) {\r\n                let hourAngle2 = hourAngle + hourStep;\r\n                let declinationAngle2 = declinationAngle + declinationStep;\r\n                if (hourAngle2 > Math.PI) {\r\n                    hourAngle2 = Math.PI;\r\n                }\r\n                if (declinationAngle2 > TILT_ANGLE) {\r\n                    declinationAngle2 = TILT_ANGLE;\r\n                }\r\n                const v1 = computeSunLocation(hourAngle, declinationAngle, latitude);\r\n                const v2 = computeSunLocation(hourAngle2, declinationAngle, latitude);\r\n                const v3 = computeSunLocation(hourAngle2, declinationAngle2, latitude);\r\n                const v4 = computeSunLocation(hourAngle, declinationAngle2, latitude);\r\n                if (v1.z >= 0 || v2.z >= 0 || v3.z >= 0 || v4.z >= 0) {\r\n                    vertices.push(v1, v2, v3, v4);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 1);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount + 3);\r\n                    verticesCount += 4;\r\n                }\r\n            }\r\n        }\r\n        geometry.setFromPoints(vertices);\r\n        geometry.setIndex(new BufferAttribute(new Uint16Array(indices), 1));\r\n        return geometry;\r\n    }, []);\r\n\r\n    return (\r\n        <mesh rotation={new Euler(-Math.PI / 2, 0, 0)}>\r\n            {/* draw base */}\r\n            <mesh>\r\n                <bufferGeometry attach='geometry'>\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"position\"]}\r\n                        count={basePositions.length / 3}\r\n                        array={basePositions}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"normal\"]}\r\n                        count={baseNormals.length / 3}\r\n                        array={baseNormals}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"color\"]}\r\n                        count={baseColors.length / 3}\r\n                        array={baseColors}\r\n                        itemSize={3}\r\n                    />\r\n                </bufferGeometry>\r\n                <meshBasicMaterial side={DoubleSide}\r\n                                   vertexColors={true}\r\n                                   polygonOffset={true}\r\n                                   polygonOffsetFactor={-0.7}\r\n                                   polygonOffsetUnits={-2}/>\r\n            </mesh>\r\n            <lineSegments\r\n                args={[new BufferGeometry().setFromPoints(tickPoints),\r\n                    new MeshBasicMaterial({color: 0x000000})]}/>\r\n            {/* draw sun path*/}\r\n            <mesh>\r\n                <lineSegments\r\n                    args={[new BufferGeometry().setFromPoints(sunPathPoints),\r\n                        new MeshBasicMaterial({\r\n                                color: new Color(1, 1, 0),\r\n                                clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                            }\r\n                        )]}/>\r\n                <mesh\r\n                    args={[sunbeltGeometry,\r\n                        new MeshBasicMaterial({\r\n                            side: DoubleSide,\r\n                            color: new Color(1, 1, 0),\r\n                            transparent: true,\r\n                            opacity: 0.5,\r\n                            clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                        })\r\n                    ]}/>\r\n                <mesh\r\n                    position={sunPosition}\r\n                    args={[new SphereGeometry(0.25, 20, 20),\r\n                        new MeshBasicMaterial({color: 0xffffff00})\r\n                    ]}/>\r\n            </mesh>\r\n        </mesh>\r\n    );\r\n\r\n};\r\n\r\nexport default Heliodon;\r\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React, {Suspense, useEffect} from 'react';\nimport './App.css';\nimport {Canvas} from '@react-three/fiber';\nimport OrbitController from \"./orbitController\";\nimport Sky from \"./views/sky\";\nimport Axes from \"./views/axes\";\nimport Compass from \"./views/compass\";\nimport Scene from \"./scene\";\nimport Ground from \"./views/ground\";\nimport {useStore} from \"./stores/common\";\nimport {Vector3} from \"three\";\nimport Heliodon from \"./views/heliodon\";\n\nconst App = () => {\n\n    const worlds = useStore(state => state.worlds);\n    const getWorld = useStore(state => state.getWorld);\n    const createNewWorld = useStore(state => state.createNewWorld);\n    const world = worlds['default']; // currently we have only one world, which is default\n\n    useEffect(() => {\n        const defaultWorld = getWorld('default');\n        if (!defaultWorld) {\n            createNewWorld();\n        }\n    }, []);\n\n    const cameraPosition = new Vector3(0, 0, 5);\n    if (world) {\n        cameraPosition.set(world.cameraPosition.x, world.cameraPosition.y, world.cameraPosition.z);\n    }\n\n    console.log('x')\n\n    return (\n        <div className=\"App\">\n            <div style={{\n                backgroundColor: 'lightblue',\n                height: '60px',\n                paddingTop: '10px',\n                fontSize: '30px'\n            }}>\n                <img alt='Logo' src={'static/assets/aladdin-logo.png'} height='50px' style={{verticalAlign: 'middle'}}/>\n                <span style={{paddingLeft: '20px', verticalAlign: 'middle'}}>Aladdin</span>\n            </div>\n            <Canvas shadows={true}\n                    camera={{\n                        position: cameraPosition,\n                        fov: 90\n                    }}\n                    style={{height: 'calc(100vh - 70px)', backgroundColor: 'black'}}>\n                <Suspense fallback={null}>\n                    <OrbitController/>\n                    <ambientLight intensity={0.25}/>\n                    <directionalLight\n                        color='white'\n                        position={[2, 2, 0]}\n                        intensity={0.5}\n                        castShadow\n                        shadow-mapSize-height={512}\n                        shadow-mapSize-width={512}\n                    />\n                    <gridHelper args={[500, 100, 'gray', 'gray']}/>\n                    <Compass/>\n                    <Axes/>\n                    <Ground/>\n                    <Sky/>\n                    <Heliodon date={new Date()} latitude={42}/>\n                    {world && <Scene world={world}/>}\n                </Suspense>\n            </Canvas>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}